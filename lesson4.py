"""
1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия.
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
"""
from math import factorial
from itertools import count, cycle
from functools import reduce
from sys import argv

try:
    w_hours, hour_cost, bonus = argv
    salary = (float(hour_cost) * int(w_hours)) + float(bonus)
    print(f"Salary = {salary}")

except ValueError:
    print("Invalid value")
    exit()

"""
2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.

Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
"""
numbers = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]

result = [el for idx, el in enumerate(numbers) if idx > 0 and numbers[idx - 1] < el]
print(result)

"""
3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.

Подсказка: использовать функцию range() и генератор.
"""

print(f"Range 20 to 240 multiples of 20 or 21 >>> ", [x for x in range(20, 240) if x % 20 == 0 or x % 21 == 0])


"""
4. Представлен список чисел. Определить элементы списка, не имеющие повторений.
Сформировать итоговый массив чисел, соответствующих требованию.
Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор.

Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
"""

numbers2 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]

items = [x for x in numbers2 if numbers2.count(x) == 1]

print(f"Result >>> {items}")


"""
5. Реализовать формирование списка, используя функцию range() и возможности генератора.
В список должны войти четные числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения всех элементов списка.

Подсказка: использовать функцию reduce().
"""

numbers3 = [item for item in range(100, 1001) if item % 2 == 0]

calculation = reduce(lambda x, y: x * y, numbers3, 1)

print(f"The result of calculating the product of all elements of the list >>> {calculation}")

"""
6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.

Подсказка: использовать функцию count() и cycle() модуля itertools.
Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.
"""

# итератор 1, генерирующий целые числа, начиная с указанного
start_it_1 = 3

for val in count(start_it_1):
    if val > 10:
        break

    print(val, end=" ")

# итератор 2, повторяющий элементы некоторого списка, определенного заранее
new_list = [2, 12, 86, 6, 42, 59, 13]
it_count = 0

for el in cycle(new_list):
    print(el, end=" ")
    it_count += 1

    if it_count >= 15:
        break

"""
7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n).
Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.

Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
"""


# print(factorial(4))


def fact(n: int):

    for i in range(1, n + 1):
        yield factorial(i)


n = 4

for el in fact(n):
    print(el)
